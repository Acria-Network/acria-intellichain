package staking

import (
	"fmt"
	"math/big"

	"github.com/0xPolygon/polygon-edge/chain"
	"github.com/0xPolygon/polygon-edge/helper/common"
	"github.com/0xPolygon/polygon-edge/helper/hex"
	"github.com/0xPolygon/polygon-edge/helper/keccak"
	"github.com/0xPolygon/polygon-edge/types"
	"github.com/0xPolygon/polygon-edge/validators"
)

var (
	MinValidatorCount = uint64(1)
	MaxValidatorCount = common.MaxSafeJSInt
)

// getAddressMapping returns the key for the SC storage mapping (address => something)
//
// More information:
// https://docs.soliditylang.org/en/latest/internals/layout_in_storage.html
func getAddressMapping(address types.Address, slot int64) []byte {
	bigSlot := big.NewInt(slot)

	finalSlice := append(
		common.PadLeftOrTrim(address.Bytes(), 32),
		common.PadLeftOrTrim(bigSlot.Bytes(), 32)...,
	)

	return keccak.Keccak256(nil, finalSlice)
}

// getIndexWithOffset is a helper method for adding an offset to the already found keccak hash
func getIndexWithOffset(keccakHash []byte, offset uint64) []byte {
	bigOffset := big.NewInt(int64(offset))
	bigKeccak := big.NewInt(0).SetBytes(keccakHash)

	bigKeccak.Add(bigKeccak, bigOffset)

	return bigKeccak.Bytes()
}

// getStorageIndexes is a helper function for getting the correct indexes
// of the storage slots which need to be modified during bootstrap.
//
// It is SC dependant, and based on the SC located at:
// https://github.com/0xPolygon/staking-contracts/
func getStorageIndexes(validator validators.Validator, index int) *StorageIndexes {
	storageIndexes := &StorageIndexes{}
	address := validator.Addr()

	// Get the indexes for the mappings
	// The index for the mapping is retrieved with:
	// keccak(address . slot)
	// . stands for concatenation (basically appending the bytes)
	storageIndexes.AddressToIsValidatorIndex = getAddressMapping(
		address,
		addressToIsValidatorSlot,
	)

	storageIndexes.AddressToStakedAmountIndex = getAddressMapping(
		address,
		addressToStakedAmountSlot,
	)

	storageIndexes.AddressToValidatorIndexIndex = getAddressMapping(
		address,
		addressToValidatorIndexSlot,
	)

	storageIndexes.ValidatorBLSPublicKeyIndex = getAddressMapping(
		address,
		addressToBLSPublicKeySlot,
	)

	// Index for array types is calculated as keccak(slot) + index
	// The slot for the dynamic arrays that's put in the keccak needs to be in hex form (padded 64 chars)
	storageIndexes.ValidatorsIndex = getIndexWithOffset(
		keccak.Keccak256(nil, common.PadLeftOrTrim(big.NewInt(validatorsSlot).Bytes(), 32)),
		uint64(index),
	)

	return storageIndexes
}

// setBytesToStorage sets bytes data into storage map from specified base index
func setBytesToStorage(
	storageMap map[types.Hash]types.Hash,
	baseIndexBytes []byte,
	data []byte,
) {
	dataLen := len(data)
	baseIndex := types.BytesToHash(baseIndexBytes)

	if dataLen <= 31 {
		bytes := types.Hash{}

		copy(bytes[:len(data)], data)

		// Set 2*Size at the first byte
		bytes[len(bytes)-1] = byte(dataLen * 2)

		storageMap[baseIndex] = bytes

		return
	}

	// Set size at the base index
	baseSlot := types.Hash{}
	baseSlot[31] = byte(2*dataLen + 1)
	storageMap[baseIndex] = baseSlot

	zeroIndex := keccak.Keccak256(nil, baseIndexBytes)
	numBytesInSlot := 256 / 8

	for i := 0; i < dataLen; i++ {
		offset := i / numBytesInSlot

		slotIndex := types.BytesToHash(getIndexWithOffset(zeroIndex, uint64(offset)))
		byteIndex := i % numBytesInSlot

		slot := storageMap[slotIndex]
		slot[byteIndex] = data[i]

		storageMap[slotIndex] = slot
	}
}

// PredeployParams contains the values used to predeploy the PoS staking contract
type PredeployParams struct {
	MinValidatorCount uint64
	MaxValidatorCount uint64
}

// StorageIndexes is a wrapper for different storage indexes that
// need to be modified
type StorageIndexes struct {
	ValidatorsIndex              []byte // []address
	ValidatorBLSPublicKeyIndex   []byte // mapping(address => byte[])
	AddressToIsValidatorIndex    []byte // mapping(address => bool)
	AddressToStakedAmountIndex   []byte // mapping(address => uint256)
	AddressToValidatorIndexIndex []byte // mapping(address => uint256)
}

// Slot definitions for SC storage
var (
	validatorsSlot              = int64(0) // Slot 0
	addressToIsValidatorSlot    = int64(1) // Slot 1
	addressToStakedAmountSlot   = int64(2) // Slot 2
	addressToValidatorIndexSlot = int64(3) // Slot 3
	stakedAmountSlot            = int64(4) // Slot 4
	minNumValidatorSlot         = int64(5) // Slot 5
	maxNumValidatorSlot         = int64(6) // Slot 6
	addressToBLSPublicKeySlot   = int64(7) // Slot 7
	validatorThresholdSlot      = int64(8) // Slot 8
	adminSlot                   = int64(9) // Slot 9
)

const (
	DefaultStakedBalance = "0x8AC7230489E80000" // 10 ETH
	//nolint: lll
	StakingSCBytecode = "0x60806040526004361061012e5760003560e01c80638a7c016a116100ab578063ca1e78191161006f578063ca1e78191461045b578063d94c111b14610486578063e387a7ed146104af578063e804fbf6146104da578063f90ecacc14610505578063facd743b146105425761019c565b80638a7c016a14610374578063960bfe041461039f5780639911da87146103c8578063af6da36e14610405578063c795c077146104305761019c565b80633a4b66f1116100f25780633a4b66f11461029a5780633c561f04146102a457806351a9ab32146102cf578063714ff4251461030c5780637dceceb8146103375761019c565b806302b75199146101a1578063065ae171146101de5780632367f6b51461021b5780632def662014610258578063373d61321461026f5761019c565b3661019c576101523373ffffffffffffffffffffffffffffffffffffffff1661057f565b15610192576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610189906117c7565b60405180910390fd5b61019a6105a2565b005b600080fd5b3480156101ad57600080fd5b506101c860048036038101906101c39190611859565b610725565b6040516101d5919061189f565b60405180910390f35b3480156101ea57600080fd5b5061020560048036038101906102009190611859565b61073d565b60405161021291906118d5565b60405180910390f35b34801561022757600080fd5b50610242600480360381019061023d9190611859565b61075d565b60405161024f919061189f565b60405180910390f35b34801561026457600080fd5b5061026d6107a6565b005b34801561027b57600080fd5b50610284610891565b604051610291919061189f565b60405180910390f35b6102a261089b565b005b3480156102b057600080fd5b506102b9610904565b6040516102c69190611a42565b60405180910390f35b3480156102db57600080fd5b506102f660048036038101906102f19190611859565b610aaa565b6040516103039190611aae565b60405180910390f35b34801561031857600080fd5b50610321610b4a565b60405161032e919061189f565b60405180910390f35b34801561034357600080fd5b5061035e60048036038101906103599190611859565b610b54565b60405161036b919061189f565b60405180910390f35b34801561038057600080fd5b50610389610b6c565b604051610396919061189f565b60405180910390f35b3480156103ab57600080fd5b506103c660048036038101906103c19190611afc565b610b72565b005b3480156103d457600080fd5b506103ef60048036038101906103ea9190611859565b610d90565b6040516103fc919061189f565b60405180910390f35b34801561041157600080fd5b5061041a610da8565b604051610427919061189f565b60405180910390f35b34801561043c57600080fd5b50610445610dae565b604051610452919061189f565b60405180910390f35b34801561046757600080fd5b50610470610db4565b60405161047d9190611be7565b60405180910390f35b34801561049257600080fd5b506104ad60048036038101906104a89190611d3e565b610e42565b005b3480156104bb57600080fd5b506104c4610ee0565b6040516104d1919061189f565b60405180910390f35b3480156104e657600080fd5b506104ef610ee6565b6040516104fc919061189f565b60405180910390f35b34801561051157600080fd5b5061052c60048036038101906105279190611afc565b610ef0565b6040516105399190611d96565b60405180910390f35b34801561054e57600080fd5b5061056960048036038101906105649190611859565b610f2f565b60405161057691906118d5565b60405180910390f35b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b34600460008282546105b49190611de0565b9250508190555034600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461060a9190611de0565b9250508190555061061a33610f85565b156106d55761062833610fe5565b600a80549050600b60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600a339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b3373ffffffffffffffffffffffffffffffffffffffff167f9e71bc8eea02a63969f509818f2dafb9254532904319f9dbda79b67bd34a5f3d3460405161071b919061189f565b60405180910390a2565b60036020528060005260406000206000915090505481565b60016020528060005260406000206000915054906101000a900460ff1681565b6000600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6107c53373ffffffffffffffffffffffffffffffffffffffff1661057f565b15610805576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107fc906117c7565b60405180910390fd5b6000600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205411610887576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161087e90611e60565b60405180910390fd5b61088f611134565b565b6000600454905090565b6108ba3373ffffffffffffffffffffffffffffffffffffffff1661057f565b156108fa576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108f1906117c7565b60405180910390fd5b6109026105a2565b565b60606000808054905067ffffffffffffffff81111561092657610925611c13565b5b60405190808252806020026020018201604052801561095957816020015b60608152602001906001900390816109445790505b50905060005b600080549050811015610aa2576007600080838154811061098357610982611e80565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002080546109f390611ede565b80601f0160208091040260200160405190810160405280929190818152602001828054610a1f90611ede565b8015610a6c5780601f10610a4157610100808354040283529160200191610a6c565b820191906000526020600020905b815481529060010190602001808311610a4f57829003601f168201915b5050505050828281518110610a8457610a83611e80565b5b60200260200101819052508080610a9a90611f0f565b91505061095f565b508091505090565b60076020528060005260406000206000915090508054610ac990611ede565b80601f0160208091040260200160405190810160405280929190818152602001828054610af590611ede565b8015610b425780601f10610b1757610100808354040283529160200191610b42565b820191906000526020600020905b815481529060010190602001808311610b2557829003601f168201915b505050505081565b6000600554905090565b60026020528060005260406000206000915090505481565b60085481565b600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610c02576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bf990611fa3565b60405180910390fd5b806008819055506060600a805480602002602001604051908101604052809291908181526020018280548015610c8d57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610c43575b5050505050905060005b8151811015610d8b5760085460026000848481518110610cba57610cb9611e80565b5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541015610d2b57610d26828281518110610d1957610d18611e80565b5b6020026020010151611416565b610d78565b610d4e828281518110610d4157610d40611e80565b5b6020026020010151610f85565b15610d7757610d76828281518110610d6957610d68611e80565b5b6020026020010151610fe5565b5b5b8080610d8390611f0f565b915050610c97565b505050565b600b6020528060005260406000206000915090505481565b60065481565b60055481565b60606000805480602002602001604051908101604052809291908181526020018280548015610e3857602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610dee575b5050505050905090565b80600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209081610e8e919061216f565b503373ffffffffffffffffffffffffffffffffffffffff167f472da4d064218fa97032725fbcff922201fa643fed0765b5ffe0ceef63d7b3dc82604051610ed59190611aae565b60405180910390a250565b60045481565b6000600654905090565b60008181548110610f0057600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff169050919050565b6000610f9082611714565b158015610fde5750600854600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410155b9050919050565b6006546000805490501061102e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611025906122b3565b60405180910390fd5b60018060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550600080549050600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506000819080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490506000600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555080600460008282546111cf91906122d3565b925050819055506111df33611714565b1561137e576111ed33611416565b6000600b60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905060006001600a8054905061124591906122d3565b9050808214611334576000600a828154811061126457611263611e80565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905080600a84815481106112a6576112a5611e80565b5b9060005260206000200160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555082600b60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550505b600a80548061134657611345612307565b5b6001900381819060005260206000200160006101000a81549073ffffffffffffffffffffffffffffffffffffffff0219169055905550505b3373ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f193505050501580156113c4573d6000803e3d6000fd5b503373ffffffffffffffffffffffffffffffffffffffff167f0f5bb82176feb1b5e747e28471aa92156a04d9f3ab9f45f28e2d704232b93f758260405161140b919061189f565b60405180910390a250565b6005546000805490501161145f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611456906123a8565b60405180910390fd5b600080549050600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054106114e5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114dc90612414565b60405180910390fd5b6000600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490506000600160008054905061153d91906122d3565b905080821461162b57600080828154811061155b5761155a611e80565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050806000848154811061159d5761159c611e80565b5b9060005260206000200160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555082600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550505b6000600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055506000600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555060008054806116da576116d9612307565b5b6001900381819060005260206000200160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690559055505050565b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff169050919050565b600082825260208201905092915050565b7f4f6e6c7920454f412063616e2063616c6c2066756e6374696f6e000000000000600082015250565b60006117b1601a8361176a565b91506117bc8261177b565b602082019050919050565b600060208201905081810360008301526117e0816117a4565b9050919050565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000611826826117fb565b9050919050565b6118368161181b565b811461184157600080fd5b50565b6000813590506118538161182d565b92915050565b60006020828403121561186f5761186e6117f1565b5b600061187d84828501611844565b91505092915050565b6000819050919050565b61189981611886565b82525050565b60006020820190506118b46000830184611890565b92915050565b60008115159050919050565b6118cf816118ba565b82525050565b60006020820190506118ea60008301846118c6565b92915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561195657808201518184015260208101905061193b565b60008484015250505050565b6000601f19601f8301169050919050565b600061197e8261191c565b6119888185611927565b9350611998818560208601611938565b6119a181611962565b840191505092915050565b60006119b88383611973565b905092915050565b6000602082019050919050565b60006119d8826118f0565b6119e281856118fb565b9350836020820285016119f48561190c565b8060005b85811015611a305784840389528151611a1185826119ac565b9450611a1c836119c0565b925060208a019950506001810190506119f8565b50829750879550505050505092915050565b60006020820190508181036000830152611a5c81846119cd565b905092915050565b600082825260208201905092915050565b6000611a808261191c565b611a8a8185611a64565b9350611a9a818560208601611938565b611aa381611962565b840191505092915050565b60006020820190508181036000830152611ac88184611a75565b905092915050565b611ad981611886565b8114611ae457600080fd5b50565b600081359050611af681611ad0565b92915050565b600060208284031215611b1257611b116117f1565b5b6000611b2084828501611ae7565b91505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b611b5e8161181b565b82525050565b6000611b708383611b55565b60208301905092915050565b6000602082019050919050565b6000611b9482611b29565b611b9e8185611b34565b9350611ba983611b45565b8060005b83811015611bda578151611bc18882611b64565b9750611bcc83611b7c565b925050600181019050611bad565b5085935050505092915050565b60006020820190508181036000830152611c018184611b89565b905092915050565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b611c4b82611962565b810181811067ffffffffffffffff82111715611c6a57611c69611c13565b5b80604052505050565b6000611c7d6117e7565b9050611c898282611c42565b919050565b600067ffffffffffffffff821115611ca957611ca8611c13565b5b611cb282611962565b9050602081019050919050565b82818337600083830152505050565b6000611ce1611cdc84611c8e565b611c73565b905082815260208101848484011115611cfd57611cfc611c0e565b5b611d08848285611cbf565b509392505050565b600082601f830112611d2557611d24611c09565b5b8135611d35848260208601611cce565b91505092915050565b600060208284031215611d5457611d536117f1565b5b600082013567ffffffffffffffff811115611d7257611d716117f6565b5b611d7e84828501611d10565b91505092915050565b611d908161181b565b82525050565b6000602082019050611dab6000830184611d87565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000611deb82611886565b9150611df683611886565b9250828201905080821115611e0e57611e0d611db1565b5b92915050565b7f4f6e6c79207374616b65722063616e2063616c6c2066756e6374696f6e000000600082015250565b6000611e4a601d8361176a565b9150611e5582611e14565b602082019050919050565b60006020820190508181036000830152611e7981611e3d565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680611ef657607f821691505b602082108103611f0957611f08611eaf565b5b50919050565b6000611f1a82611886565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203611f4c57611f4b611db1565b5b600182019050919050565b7f4f6e6c792061646d696e2063616e2063616c6c2066756e6374696f6e00000000600082015250565b6000611f8d601c8361176a565b9150611f9882611f57565b602082019050919050565b60006020820190508181036000830152611fbc81611f80565b9050919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026120257fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82611fe8565b61202f8683611fe8565b95508019841693508086168417925050509392505050565b6000819050919050565b600061206c61206761206284611886565b612047565b611886565b9050919050565b6000819050919050565b61208683612051565b61209a61209282612073565b848454611ff5565b825550505050565b600090565b6120af6120a2565b6120ba81848461207d565b505050565b5b818110156120de576120d36000826120a7565b6001810190506120c0565b5050565b601f821115612123576120f481611fc3565b6120fd84611fd8565b8101602085101561210c578190505b61212061211885611fd8565b8301826120bf565b50505b505050565b600082821c905092915050565b600061214660001984600802612128565b1980831691505092915050565b600061215f8383612135565b9150826002028217905092915050565b6121788261191c565b67ffffffffffffffff81111561219157612190611c13565b5b61219b8254611ede565b6121a68282856120e2565b600060209050601f8311600181146121d957600084156121c7578287015190505b6121d18582612153565b865550612239565b601f1984166121e786611fc3565b60005b8281101561220f578489015182556001820191506020850194506020810190506121ea565b8683101561222c5784890151612228601f891682612135565b8355505b6001600288020188555050505b505050505050565b7f56616c696461746f72207365742068617320726561636865642066756c6c206360008201527f6170616369747900000000000000000000000000000000000000000000000000602082015250565b600061229d60278361176a565b91506122a882612241565b604082019050919050565b600060208201905081810360008301526122cc81612290565b9050919050565b60006122de82611886565b91506122e983611886565b925082820390508181111561230157612300611db1565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b7f56616c696461746f72732063616e2774206265206c657373207468616e20746860008201527f65206d696e696d756d2072657175697265642076616c696461746f72206e756d602082015250565b600061239260408361176a565b915061239d82612336565b604082019050919050565b600060208201905081810360008301526123c181612385565b9050919050565b7f696e646578206f7574206f662072616e67650000000000000000000000000000600082015250565b60006123fe60128361176a565b9150612409826123c8565b602082019050919050565b6000602082019050818103600083015261242d816123f1565b905091905056fea26469706673582212202cae50e9c37f46f4aa333b4ab3141d9a74f2ca5aa7e092e5a8380de25cd539ae64736f6c63430008120033"
)

// PredeployStakingSC is a helper method for setting up the staking smart contract account,
// using the passed in validators as pre-staked validators
func PredeployStakingSC(
	vals validators.Validators,
	params PredeployParams,
) (*chain.GenesisAccount, error) {
	// Set the code for the staking smart contract
	// Code retrieved from https://github.com/0xPolygon/staking-contracts
	scHex, _ := hex.DecodeHex(StakingSCBytecode)
	stakingAccount := &chain.GenesisAccount{
		Code: scHex,
	}

	// Parse the default staked balance value into *big.Int
	val := DefaultStakedBalance
	bigDefaultStakedBalance, err := types.ParseUint256orHex(&val)

	if err != nil {
		return nil, fmt.Errorf("unable to generate DefaultStatkedBalance, %w", err)
	}

	// Generate the empty account storage map
	storageMap := make(map[types.Hash]types.Hash)
	bigTrueValue := big.NewInt(1)
	stakedAmount := big.NewInt(0)
	bigMinNumValidators := big.NewInt(int64(params.MinValidatorCount))
	bigMaxNumValidators := big.NewInt(int64(params.MaxValidatorCount))
	valsLen := big.NewInt(0)

	if vals != nil {
		valsLen = big.NewInt(int64(vals.Len()))

		for idx := 0; idx < vals.Len(); idx++ {
			validator := vals.At(uint64(idx))

			// Update the total staked amount
			stakedAmount = stakedAmount.Add(stakedAmount, bigDefaultStakedBalance)

			// Get the storage indexes
			storageIndexes := getStorageIndexes(validator, idx)

			// Set the value for the validators array
			storageMap[types.BytesToHash(storageIndexes.ValidatorsIndex)] =
				types.BytesToHash(
					validator.Addr().Bytes(),
				)

			if blsValidator, ok := validator.(*validators.BLSValidator); ok {
				setBytesToStorage(
					storageMap,
					storageIndexes.ValidatorBLSPublicKeyIndex,
					blsValidator.BLSPublicKey,
				)
			}

			// Set the value for the address -> validator array index mapping
			storageMap[types.BytesToHash(storageIndexes.AddressToIsValidatorIndex)] =
				types.BytesToHash(bigTrueValue.Bytes())

			// Set the value for the address -> staked amount mapping
			storageMap[types.BytesToHash(storageIndexes.AddressToStakedAmountIndex)] =
				types.StringToHash(hex.EncodeBig(bigDefaultStakedBalance))

			// Set the value for the address -> validator index mapping
			storageMap[types.BytesToHash(storageIndexes.AddressToValidatorIndexIndex)] =
				types.StringToHash(hex.EncodeUint64(uint64(idx)))
		}
	}

	// Set the value for the total staked amount
	storageMap[types.BytesToHash(big.NewInt(stakedAmountSlot).Bytes())] =
		types.BytesToHash(stakedAmount.Bytes())

	// Set the value for the size of the validators array
	storageMap[types.BytesToHash(big.NewInt(validatorsSlot).Bytes())] =
		types.BytesToHash(valsLen.Bytes())

	// Set the value for the minimum number of validators
	storageMap[types.BytesToHash(big.NewInt(minNumValidatorSlot).Bytes())] =
		types.BytesToHash(bigMinNumValidators.Bytes())

	// Set the value for the maximum number of validators
	storageMap[types.BytesToHash(big.NewInt(maxNumValidatorSlot).Bytes())] =
		types.BytesToHash(bigMaxNumValidators.Bytes())

    // Set the value for validator threshold
    storageMap[types.BytesToHash(big.NewInt(validatorThresholdSlot).Bytes())] =
        types.StringToHash("0x48431755769BB40000")

    // Set the value for the maximum number of validators
    storageMap[types.BytesToHash(big.NewInt(adminSlot).Bytes())] =
        types.StringToHash("0xb14Ff1E03a52D88c4F699489eFF2e67D10eeF1B5")

	// Save the storage map
	stakingAccount.Storage = storageMap

	// Set the Staking SC balance to numValidators * defaultStakedBalance
	stakingAccount.Balance = stakedAmount

	return stakingAccount, nil
}
